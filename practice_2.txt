/*
--select * from staff;

select department,
	count(*) as counts,
	min(salary),max(salary)
from
	staff
group by
	department
order by
	counts desc;
	
SELECT 
	last_name, department,salary
FROM 
	staff
WHERE 
	department LIKE 'B%'
	and
	salary BETWEEN 100000 AND 130000
ORDER BY
	salary DESC
*/

SELECT DISTINCT
	job_title||'-'||department title_dep
FROM 
 	staff;
	
SELECT job_title, (job_title like '%Assistant%') is_asst
FROM staff
--WHERE job_title like '%assistant%'
ORDER BY is_asst DESC;

SELECT SUBSTRING('abcdefghijk',1,3) test_string;

SELECT OVERLAY(job_title PLACING 'Asst.' FROM 1 FOR 9)
FROM 
staff 
WHERE 
job_title LIKE '%Assistant%';

SELECT 
	job_title
FROM
	staff
WHERE
	job_title SIMILAR TO '%Assistant I_*';
	

SELECT 
	job_title
FROM
	staff
WHERE
	job_title SIMILAR TO '[EPS]%';
	
SELECT 
	department,avg(salary),trunc(avg(salary)),round(avg(salary),-2),
	ceil(avg(salary))
FROM
	staff
GROUP BY
	department;

--SELECT SUBQUERY MUST HAVE LINK TO OUTER QUERY
SELECT 
	s1.last_name,
	s1.salary,
	s1.department,
	(SELECT ROUND(AVG(salary)) 
	FROM staff s2 
	WHERE s2.department=s1.department)
FROM 
	staff s1;

SELECT 
	s1.department,
	round(avg(s1.salary))
FROM
(SELECT
	department,salary
FROM 
	staff
WHERE
	salary>100000) s1
GROUP BY 
	department;

			  

SELECT s1.department,s1.last_name,s1.salary 
FROM
	staff s1
WHERE
s1.salary IN (SELECT MAX(salary)
	from
	staff s2);
			  
SELECT * FROM company_divisions LIMIT 100;
			  
SELECT s.last_name,
		s.department,
		cd.company_division
FROM
	staff s
FULL OUTER JOIN 
	company_divisions cd
ON
	s.department=cd.department
WHERE
	cd.company_division is null;

			  
DROP VIEW staff_div_reg;
			  
CREATE VIEW staff_div_reg AS		  
SELECT 
 s.*, cd.company_division, cr.company_regions
FROM staff s
LEFT JOIN
company_divisions cd
ON
s.department=cd.department
LEFT JOIN
company_regions cr
ON
s.region_id=cr.region_id;
		
			  
SELECT COUNT(*)
	FROM staff_div_reg;
			  
SELECT 
	company_regions,
	company_division,
	count(*)
FROM staff_div_reg
GROUP BY 1,2
ORDER BY 3 DESC;
			  
SELECT COUNT(*)
	FROM staff_div_reg;
			  
SELECT 
	company_regions,
	company_division,
	gender,
	count(*)
FROM staff_div_reg
GROUP BY 
	GROUPING SETS(1,2,3)
ORDER BY 4 DESC;

CREATE OR REPLACE VIEW staff_div_reg_country AS
SELECT
	s.*,cd.company_division,cr.company_regions,cr.country
FROM
	staff s
LEFT JOIN
	company_divisions cd
ON
	cd.department=s.department
LEFT JOIN
	company_regions cr
ON
	cr.region_id=s.region_id;


SELECT
	country,company_regions , count(*)
FROM 
	staff_div_reg_country
GROUP BY
	ROLLUP(country,company_regions)
ORDER BY
		country,company_regions;
			  
SELECT
	company_division ,company_regions , count(*)
FROM 
	staff_div_reg_country
GROUP BY
	CUBE(company_division ,company_regions);
			  
SELECT
	last_name,job_title,salary
FROM
	staff
ORDER BY
	salary DESC
	FETCH FIRST 10 ROWS ONLY;
			  
SELECT
	department,
	last_name,
	salary,
	max(salary) OVER (PARTITION BY department)
FROM staff;

SELECT
	company_regions,
	last_name,
	salary,
	min(salary) OVER (PARTITION BY company_regions)
FROM
	staff_div_reg;
			  
SELECT department,
		last_name,
		salary,
		first_value(salary) OVER (PARTITION BY department ORDER BY last_name DESC)
FROM
	staff;
			  
			  
			  
SELECT
	department,last_name,salary,
	rank() OVER (PARTITION BY department ORDER BY salary desc)
FROM staff;
			  
SELECT
	department, last_name, salary,
	lag(salary) OVER (PARTITION BY department ORDER BY salary DESC)
FROM staff;

			  
SELECT 
	department,
	last_name,
	salary,
	ntile(4) OVER (PARTION BY department ORDER BY salary DESC);


SELECT * FROM staff;

SELECT * FROM staff_div_reg_country;

SELECT 
	last_name, job_title, start_date,
	lag(last_name) OVER (PARTITION BY department ORDER BY start_date) AS hire_before,
	lag(job_title) OVER (PARTITION BY department ORDER BY start_date) AS hire_before_title,
	lag(start_date) OVER (PARTITION BY department ORDER BY start_date) AS hire_before_date
FROM
	staff;


WITH mean_dept AS(SELECT
	last_name, job_title, department, salary,
	avg(salary) OVER (PARTITION BY department) AS av_sal,
	stddev(salary) OVER (PARTITION BY department) AS std_sal
FROM
	staff) 
SELECT 
	*
FROM
	(SELECT 
	*,ROUND((salary-av_sal)/std_sal,3) AS zscore
	 FROM
	 mean_dept
	) z
WHERE
 abs(z.zscore)>2
 ORDER BY 
 	department,abs(zscore) DESC;
	
WITH dept_ntile AS(
	SELECT department,
		NTILE(4) OVER (ORDER BY salary) AS quartile
	FROM 
		staff
)
SELECT 
	department,quartile,COUNT(*) as counted
FROM 
	dept_ntile
GROUP BY 
	department,quartile
HAVING 
	quartile=1
ORDER BY
	counted DESC;




WITH top_10 as 
(SELECT department,sum(salary) sumsal FROM staff
WHERE
start_date>=CURRENT_DATE - interval '5 year'
GROUP BY department
ORDER BY sumsal DESC 
FETCH FIRST 5 ROWS ONLY)
SELECT 
	SUM(sumsal) as sum_salary
FROM
	top_10;

CREATE TABLE shows --========================
(
  SHOW_ID        	integer,
  SHOW_TITLE  	varchar(100),
  EPISODE_ID    	integer,
  RUNTIME        	integer,
  RATING            	integer,
  LAUNCH_DATE	date
);


CREATE TABLE streams --=====================
(
  REGION_ID   		integer,
  STREAM_ID   		integer,
  CUSTOMER_ID 	integer,
  STREAM_DATE 	date,
  EPISODE_ID     	integer
);

INSERT INTO shows VALUES
(1, 'Silicon Valley', NULL, NULL, 8.2, to_date('2016-04-01','YYYY-MM-DD')),
(1, 'Silicon Valley', 11, 30, NULL, to_date('2016-04-01','YYYY-MM-DD')),
(1, 'Silicon Valley', 12, 28, NULL, to_date('2016-04-01','YYYY-MM-DD')),
(1, 'Silicon Valley', 13, 20, NULL, to_date('2016-04-01','YYYY-MM-DD')),
(1, 'Silicon Valley', 14, 32, NULL, to_date('2016-04-01','YYYY-MM-DD')),
(3, 'Mr. Robot', NULL, NULL, 8.2, to_date('2016-04-23','YYYY-MM-DD')),
(3, 'Mr. Robot', 31, 60, NULL, to_date('2016-04-23','YYYY-MM-DD')),
(3, 'Mr. Robot', 32, 55, NULL, to_date('2016-04-23','YYYY-MM-DD')),
(3, 'Mr. Robot', 33, 40, NULL, to_date('2016-04-23','YYYY-MM-DD'));

INSERT INTO streams VALUES
(1,91766, 4, to_date('2016-05-01','YYYY-MM-DD'), 11),
(1,72745, 5, to_date('2016-05-01','YYYY-MM-DD'), 32),
(1,72589, 8, to_date('2016-05-01','YYYY-MM-DD'), 31),
(1,63619, 1, to_date('2016-05-01','YYYY-MM-DD'), 31),
(1,51324, 7, to_date('2016-05-01','YYYY-MM-DD'), 13),
(1,93863, 4, to_date('2016-05-02','YYYY-MM-DD'), 12),
(1,12993, 4, to_date('2016-05-02','YYYY-MM-DD'), 13),
(1,99591, 7, to_date('2016-05-02','YYYY-MM-DD'), 32),
(1,92247, 6, to_date('2016-05-02','YYYY-MM-DD'), 12),
(1,81441, 7, to_date('2016-05-02','YYYY-MM-DD'), 32),
….


/* Count the number of customers in each region */

SELECT REGION_ID, COUNT(DISTINCT CUSTOMER_ID)
FROM STREAMS
GROUP BY REGION_ID;


/* Compute a running total for minutes watched by customer by dates, assume customers watched the entire episode */

SELECT
STREAMS.CUSTOMER_ID,STREAMS.STREAM_DATE,
SUM(SHOWS.RUNTIME) OVER (ORDER BY STREAMS.CUSTOMER_ID,STREAMS.STREAM_DATE)
FROM
STREAMS
JOIN
SHOWS
ON STREAMS.EPISODE_ID=SHOWS.EPISODE_ID

/* Customers watch many different shows with different ratings 
(note the ratings are at the show level, not at the episode level). 
We want to compute an “average” rating metric for each customer. 
Please suggest a metric. */

WITH SHOW_RATINGS AS(
SELECT 
    STREAMS1.SHOW_ID,STREAMS1.RUNTIME,STREAMS1.EPISODE_ID,STREAMS2.RATING
FROM 
SELECT(SHOW_ID,RUNTIME,EPISODE_ID
FROM
STREAMS
WHERE EPISODE_ID IS NOT NULL) STREAMS1
JOIN
SELECT(RATING,SHOW_ID
FROM
STREAMS
WHERE
EPISODE_ID IS NULL) STREAMS2
ON 
STREAMS1.SHOW_ID=STREAMS2.SHOW_ID
),
SELECT 
FROM
(
SELECT *, RUNTIME*RATING AS WEIGHT_RATING,
FROM
STREAMS
JOIN
SHOW_RATINGS
ON
STREAMS.SHOW_ID=SHOW_RATINGS.SHOW_ID
) GROUP BY CUSTOMER_ID


STEP 3
AGGREGATE THE WEIGHT_RATING AND AGGREGATION OF MINUTES WATCHED TO CALCULATE THE WEIGHTED AVERAGE 
OF THE SHOWS WATCHED TAKING INTO ACCOUNT NUMBER OF MINUTES WATCHED WHILE SCALING TO PREVIOUSLY 
DEFINED BOUNDS 




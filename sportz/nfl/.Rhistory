highwayin<-'no'
}
highway<-c(highway,highwayin)
}
set_vertex_attr(gridgraph,'highway',value=highway)->gridgraph
#ggraph(gridgraph)+geom_node_point(aes(colour=highway))
#gp
ggraph(gridgraph)+geom_node_point(aes(colour=highway),size=2)+
xlab('1st - 61st Street')+ylab('Avenune A-Z')+
theme(axis.text=element_blank(),
axis.title.y=element_text(angle=270))+
labs(colour="Ultra")+ggtitle('PBJ Delivery')
runApp('GitHub/DSGit/riddler/07_06_riddler/pbj_delivery')
runApp('GitHub/DSGit/riddler/07_06_riddler/pbj_delivery')
?geom_node_point
runApp('GitHub/DSGit/riddler/07_06_riddler/pbj_delivery')
runApp('GitHub/DSGit/riddler/07_06_riddler/pbj_delivery')
runApp('GitHub/DSGit/riddler/07_06_riddler/pbj_delivery')
#ggraph(gridgraph)+geom_node_point(aes(colour=highway))
#gp
ggraph(gridgraph)+geom_node_point(aes(colour=highway,text='Avenue:',avenue,),size=2)+
xlab('1st - 61st Street')+ylab('Avenune A-Z')+
theme(axis.text=element_blank(),
axis.title.y=element_text(angle=270))+
labs(colour="Ultra")+ggtitle('PBJ Delivery')
#ggraph(gridgraph)+geom_node_point(aes(colour=highway))
#gp
ggraph(gridgraph)+geom_node_point(aes(colour=highway),size=2)+
xlab('1st - 61st Street')+ylab('Avenune A-Z')+
theme(axis.text=element_blank(),
axis.title.y=element_text(angle=270))+
labs(colour="Ultra")+ggtitle('PBJ Delivery')
library(tidyverse)
library(tidygraph)
library(igraph)
library(ggraph)
library(plotly)
letters[1:21]
ews<-rep(1:61,rep(21,61))
xs<-rep(seq(0,by=0.1,length.out = 61),rep(21,61))
nss<-rep(rev(letters[1:21]),61)
ys<-rep(seq(0,by=0.1,length.out = 21),61)
nodetib<-tibble(ew=ews,ns=nss,x=xs,y=ys)%>%mutate(name=paste0(ns,ew))%>%
select(name,everything())
matrix(ncol=1271,nrow=1271)
froms<-c()
tos<-c()
for(i in 1:21){
ns<-letters[i]
for(j in 1:60){
froms<-c(froms,paste0(ns,j))
tos<-c(tos,paste0(ns,j+1))
}
}
for(i in 1:61){
for(j in 1:20){
froms<-c(froms,paste0(letters[j],i))
tos<-c(tos,paste0(letters[j+1],i))
}
}
#devtools::install_github('hadley/ggplot2')
#devtools::install_github('thomasp85/ggforce')
#devtools::install_github('thomasp85/ggraph')
edgetib<-tibble(from=froms,to=tos)%>%mutate(weight=ifelse(grepl('u',from)&grepl('u',to),0.1/200,0.1/20))
gridgraph<-graph_from_data_frame(d=edgetib,vertices=nodetib,directed=FALSE)
#gridtab<-tbl_graph(nodes=nodetib,edges=edgetib,directed=FALSE)
startnode<-'f20'
f20<-V(gridgraph)[V(gridgraph)$name == startnode]
f20paths<-shortest_paths(gridgraph,from=f20,weights=NULL)
vertgrid<-V(gridgraph)
which(vertgrid$name=='g1')
highway<-c()
for(i in 1:length(f20paths$vpath)){
spath<-f20paths$vpath[[i]]
if(sum(grepl('U',spath$name))>=2){
highwayin<-'yes'
}else if(tail(spath$name,1)==startnode){
highwayin<-'starting point'
}else{
highwayin<-'no'
}
highway<-c(highway,highwayin)
}
set_vertex_attr(gridgraph,'highway',value=highway)->gridgraph
#ggraph(gridgraph)+geom_node_point(aes(colour=highway))
#gp
ggraph(gridgraph)+geom_node_point(aes(colour=highway),size=2)+
xlab('1st - 61st Street')+ylab('Avenune a-z')+
theme(axis.text=element_blank(),
axis.title.y=element_text(angle=270))+
labs(colour="Ultra")+ggtitle('PBJ Delivery')
library(tidyverse)
library(tidygraph)
library(igraph)
library(ggraph)
library(plotly)
letters[1:21]
ews<-rep(1:61,rep(21,61))
xs<-rep(seq(0,by=0.1,length.out = 61),rep(21,61))
nss<-rep(rev(letters[1:21]),61)
ys<-rep(seq(0,by=0.1,length.out = 21),61)
nodetib<-tibble(ew=ews,ns=nss,x=xs,y=ys)%>%mutate(name=paste0(ns,ew))%>%
select(name,everything())
matrix(ncol=1271,nrow=1271)
froms<-c()
tos<-c()
for(i in 1:21){
ns<-letters[i]
for(j in 1:60){
froms<-c(froms,paste0(ns,j))
tos<-c(tos,paste0(ns,j+1))
}
}
for(i in 1:61){
for(j in 1:20){
froms<-c(froms,paste0(letters[j],i))
tos<-c(tos,paste0(letters[j+1],i))
}
}
#devtools::install_github('hadley/ggplot2')
#devtools::install_github('thomasp85/ggforce')
#devtools::install_github('thomasp85/ggraph')
edgetib<-tibble(from=froms,to=tos)%>%mutate(weight=ifelse(grepl('u',from)&grepl('u',to),0.1/200,0.1/20))
gridgraph<-graph_from_data_frame(d=edgetib,vertices=nodetib,directed=FALSE)
#gridtab<-tbl_graph(nodes=nodetib,edges=edgetib,directed=FALSE)
startnode<-'f20'
f20<-V(gridgraph)[V(gridgraph)$name == startnode]
f20paths<-shortest_paths(gridgraph,from=f20,weights=NULL)
vertgrid<-V(gridgraph)
which(vertgrid$name=='g1')
highway<-c()
for(i in 1:length(f20paths$vpath)){
spath<-f20paths$vpath[[i]]
if(sum(grepl('u',spath$name))>=2){
highwayin<-'yes'
}else if(tail(spath$name,1)==startnode){
highwayin<-'starting point'
}else{
highwayin<-'no'
}
highway<-c(highway,highwayin)
}
set_vertex_attr(gridgraph,'highway',value=highway)->gridgraph
#ggraph(gridgraph)+geom_node_point(aes(colour=highway))
#gp
ggraph(gridgraph)+geom_node_point(aes(colour=highway),size=2)+
xlab('1st - 61st Street')+ylab('Avenune a-z')+
theme(axis.text=element_blank(),
axis.title.y=element_text(angle=270))+
labs(colour="Ultra")+ggtitle('PBJ Delivery')
shiny::runApp('GitHub/DSGit/sportz/nfl/rankings')
runApp('GitHub/DSGit/sportz/nfl/rankings')
runApp('GitHub/DSGit/sportz/nfl/rankings')
runApp('GitHub/DSGit/sportz/nfl/rankings')
runApp('GitHub/DSGit/sportz/nfl/rankings')
runApp('GitHub/DSGit/sportz/nfl/rankings')
urls<-read_html(url)%>%html_nodes('.tablesm')
library(rvest)
library(tidyverse)
#install.packages('NbClust')
library(NbClust)
url<-'http://www.espn.com/golf/stats/hole'
urls<-read_html(url)%>%html_nodes('.tablesm')
urls[[1]]
tourneyurls<-urls[[1]]%>%html_children()%>%html_attr('value')
for(i in 1:length(tourneyurls)){
tourneyurl<-paste0('http:',tourneyurls[i])
read_html(tourneyurl)%>%html_table(fill=TRUE)->tourneytable
if(i==1){
for(j in 1:length(tourneytable)){
if(j==1){
strokedats<-tourneytable[[j]]
colnames(strokedats)<-strokedats[2,]
strokedats$course<-strokedats[1,1]
strokedats<-strokedats[3:nrow(strokedats),]
}
else{
strokedat<-tourneytable[[j]]
colnames(strokedat)<-strokedat[2,]
strokedat$course<-strokedat[1,1]
strokedat<-strokedat[3:nrow(strokedat),]
strokedats<-rbind(strokedats,strokedat)
}
}
}
else{
for(j in 1:length(tourneytable)){
strokedat<-tourneytable[[j]]
colnames(strokedat)<-strokedat[2,]
strokedat$course<-strokedat[1,1]
strokedat<-strokedat[3:nrow(strokedat),]
if(ncol(strokedat)==ncol(strokedats)&nrow(strokedat)>17){
strokedats<-rbind(strokedats,strokedat)
}
}
}
}
url<-'http://www.espn.com/golf/stats/hole'
urls<-read_html(url)%>%html_nodes('.tablesm')
tourneyurls<-urls[[1]]%>%html_children()%>%html_attr('value')
for(i in 1:length(tourneyurls)){
tourneyurl<-paste0('http:',tourneyurls[i])
read_html(tourneyurl)%>%html_table(fill=TRUE)->tourneytable
if(i==1){
for(j in 1:length(tourneytable)){
if(j==1){
strokedats<-tourneytable[[j]]
colnames(strokedats)<-strokedats[2,]
strokedats$course<-strokedats[1,1]
strokedats<-strokedats[3:nrow(strokedats),]
}
else{
strokedat<-tourneytable[[j]]
colnames(strokedat)<-strokedat[2,]
strokedat$course<-strokedat[1,1]
strokedat<-strokedat[3:nrow(strokedat),]
strokedats<-rbind(strokedats,strokedat)
}
}
}
else{
for(j in 1:length(tourneytable)){
strokedat<-tourneytable[[j]]
colnames(strokedat)<-strokedat[2,]
strokedat$course<-strokedat[1,1]
strokedat<-strokedat[3:nrow(strokedat),]
if(ncol(strokedat)==ncol(strokedats)&nrow(strokedat)>17){
strokedats<-rbind(strokedats,strokedat)
}
}
}
}
strokedats%>%mutate_at(1:(ncol(strokedats)-1),.~as.numeric(ifelse(.=='NA','0',.)))->strokedats
strokedats$played<-strokedats$EAGLES+strokedats$BIRDIES+strokedats$PARS+strokedats$BOGEYS+
strokedats$DOUBLES+strokedats$OTHERS
colnames(strokedats)
strokedats%>%mutate_at(5:10,.~./played)->strokedats
glimpse(strokedats)
strokedats$yardpar<-strokedats$YARDS/strokedats$PAR
montegrez<-function(x,sdratio){
grezpoints<-c()
for(i in 1:length(x)){
grezpoints<-c(grezpoints,rnorm(10000,mean=x[i],sd=x[i]*sdratio))
}
return(grezpoints)
}
test<-montegrez(c(3,2,5))
test<-montegrez(c(3,2,5),.15)
hist(test)
rt*dist
rt<-c(6,9,5,5.5,6,6.5,12,5,5.5,6,6.5,12,5,5.5,6,6.5)
distr<-c(1,1,0.25,0.25,0.25,0.25,1,0.25,0.25,0.25,0.25,1,0.25,0.25,0.25,0.25)
rt*distr
rt/(60*distr)
(60*distr)/rt
sum((60*distr)/rt)
7/sum((60*distr)/rt)
sum((60*distr)/rt)/sum(distr)
sum((60*distr)/rt)/sum(distr)
sum(distr)
montegrez<-function(x,sdratio){
grezpoints<-c()
for(i in 1:length(x)){
grezpoints<-c(grezpoints,rnorm(10000,mean=x[i],sd=x[i]*sdratio))
}
return(grezpoints)
}
test<-montegrez(c(3,2,5),.15)
hist(test)
hist(test)
test<-montegrez(c(3,20,5),.15)
hist(test)
test<-montegrez(c(30,20,50),.15)
hist(test)
runif()
runif(1)
source('~/riddler.R')
while(apos!=0 || bpos!=n+1){
steps<-steps+1
apos<-apos+1
bpos<-bpos-1
if(apos==bpos){
if(runif(1)>0.5){
#a wins
bpos<-n
}
else{
#b wins
apos<-1
}
}
print('')
print(paste0('Steps:',steps))
print(paste0('A position:',apos))
print(paste0('B position:',bpos))
}
runinf(1)
runif(1)
runif(1)>0.5
while(apos!=0 || bpos!=n+1){
steps<-steps+1
apos<-apos+1
bpos<-bpos-1
if(apos==bpos){
if(runif(1)>0.5){
#a wins
bpos<-n
}
else{
#b wins
apos<-1
}
}
print('')
print(paste0('Steps:',steps))
print(paste0('A position:',apos))
print(paste0('B position:',bpos))
if(steps>20){
break
}
}
apos<-1
bpos<-n
while(apos!=0 || bpos!=n+1){
steps<-steps+1
apos<-apos+1
bpos<-bpos-1
if(apos==bpos){
if(runif(1)>0.5){
#a wins
bpos<-n
}
else{
#b wins
apos<-1
}
}
print('')
print(paste0('Steps:',steps))
print(paste0('A position:',apos))
print(paste0('B position:',bpos))
if(steps>20){
break
}
}
steps<-1
apos<-1
bpos<-n
while(apos!=0 || bpos!=n+1){
steps<-steps+1
apos<-apos+1
bpos<-bpos-1
if(apos==bpos){
if(runif(1)>0.5){
#a wins
bpos<-n
}
else{
#b wins
apos<-1
}
}
print('')
print(paste0('Steps:',steps))
print(paste0('A position:',apos))
print(paste0('B position:',bpos))
if(steps>20){
break
}
}
steps<-0
apos<-1
bpos<-n
while(apos!=0 || bpos!=n+1){
steps<-steps+1
apos<-apos+1
bpos<-bpos-1
if(apos==bpos){
if(runif(1)>0.5){
#a wins
bpos<-n
}
else{
#b wins
apos<-1
}
}
print('')
print(paste0('Steps:',steps))
print(paste0('A position:',apos))
print(paste0('B position:',bpos))
if(steps>20){
break
}
}
steps<-0
apos<-1
bpos<-n
while(apos!=10 || bpos!=0){
steps<-steps+1
apos<-apos+1
bpos<-bpos-1
if(apos==bpos){
if(runif(1)>0.5){
#a wins
bpos<-n
}
else{
#b wins
apos<-1
}
}
print('')
print(paste0('Steps:',steps))
print(paste0('A position:',apos))
print(paste0('B position:',bpos))
if(steps>20){
break
}
}
steps<-0
apos<-1
bpos<-n
while(apos!=10 & bpos!=0){
steps<-steps+1
apos<-apos+1
bpos<-bpos-1
if(apos==bpos){
if(runif(1)>0.5){
#a wins
bpos<-n
}
else{
#b wins
apos<-1
}
}
print('')
print(paste0('Steps:',steps))
print(paste0('A position:',apos))
print(paste0('B position:',bpos))
if(steps>20){
break
}
}
source('~/riddler.R')
source('~/riddler.R')
source('~/riddler.R')
source('~/riddler.R')
source('~/riddler.R')
source('~/riddler.R')
source('~/riddler.R')
source('~/riddler.R')
source('~/riddler.R')
source('~/riddler.R')
max(aposs)
min(bposs)
source('~/riddler.R')
hist(aposs)
max(aposs)
min(aposs)
source('~/riddler.R')
source('~/riddler.R')
source('~/riddler.R')
source('~/riddler.R')
source('~/riddler.R')
setwd('C:/Users/pwend/Documents/GitHub/DSGit/sportz/nfl')
alltables<-read_csv('NFL-preseason-regseason.csv')
library(rvest)
library(tidyverse)
library(plotly)
library(psych)
setwd('C:/Users/pwend/Documents/GitHub/DSGit/sportz/nfl')
alltables<-read_csv('NFL-preseason-regseason.csv')
breakers<-c(-1,0.438,0.625,1.2)
labelers<-paste(c('0-7 Wins','8-10 Wins','11-16 Wins'),' Last Year')
p<-alltables%>%mutate(lag_reg_win_p=cut(lag_reg_win_p,breaks=breakers,label=labelers))%>%filter(!is.na(lag_reg_win_p))%>%
ggplot(aes(x=pre_win_p,y=reg_win_p,col=playoffs,
text=paste0(year,' ',Tm,'<br>Reg:',W_reg,'-',L_reg,'<br>Pre:',W_pre,'-',L_pre)))+geom_jitter(width=.03,height=0.03)+
xlab('Preseason Win %')+ylab('Regular Season Win %')+ggtitle('Regular Season Win % vs. Preseason Win %')+
#geom_smooth(method='glm',aes(x=pre_win_p,y=reg_win_p),na.rm=TRUE,se=FALSE,size=1,linetype='dashed',col='black',inherit.aes=FALSE)+
labs(color='Playoffs',subtitle='1983-2017')+facet_wrap(vars(lag_reg_win_p))
ggplotly(p,tooltip='text')
pdistbd<-alltables%>%mutate(pre_win_p=cut(pre_win_p,breaks=c(-1,0.4,0.6,1.2),labels=c('0-40%','41-60%','61-100%')),
lag_reg_win_p=cut(lag_reg_win_p,breaks=breakers,labels=labelers)) %>%
group_by(pre_win_p,lag_reg_win_p,playoffs)%>%summarise(count=n())%>%
spread(playoffs,count)%>%mutate_at(3:5,~replace_na(.,0))%>%mutate(
total=champion+no+yes,
champion=champion/total,
no=no/total,
yes=yes/total)
pd<-pdistbd%>%gather(outcome,dist,-pre_win_p,-total,-lag_reg_win_p)%>%mutate(outcome=ifelse(outcome=='yes','playoffs',outcome))%>%filter(!is.na(lag_reg_win_p))%>%
ggplot(aes(x=pre_win_p,y=dist,fill=outcome,text=paste0('Outcome Probability:',dist,'<br>Total Cases:',total)))+
geom_col(position='dodge')+xlab('Preseason Win %')+ylab('Probability')+ggtitle('Season Outcome Probability by Preseason Outcome')+facet_wrap(vars(lag_reg_win_p))
ggplotly(pd,tooltip='text')
pdist<-alltables%>%mutate(pre_win_p=cut(pre_win_p,breaks=c(-1,0.4,0.6,1.2),labels=c('0-40%','41-60%','61-100%')),
lag_reg_win_p=cut(lag_reg_win_p,breaks=breakers,labels=labelers))%>%
group_by(pre_win_p,playoffs)%>%summarise(count=n())%>%
spread(playoffs,count)%>%mutate_at(2:4,~replace_na(.,0))%>%mutate(
total=champion+no+yes,
champion=champion/total,
no=no/total,
yes=yes/total)
pd2<-pdist%>%gather(outcome,dist,-pre_win_p,-total)%>%mutate(outcome=ifelse(outcome=='yes','playoffs',outcome))%>%ggplot(aes(x=pre_win_p,y=dist,fill=outcome,text=paste0('Outcome Probability:',dist,'<br>Total Cases:',total)))+
geom_col(position='dodge')+xlab('Preseason Win %')+ylab('Probability')+ggtitle('Season Outcome Probability by Preseason Outcome')#+facet_wrap(vars(lag_reg_win_p))
ggplotly(pd2
,tooltip='text')
for(i in 1:3){
alltables%>%filter(lag_reg_win_p>breakers[i]&lag_reg_win_p<breakers[i+1])->temptab
print(corr.test(temptab$reg_win_p,temptab$pre_win_p))
print(summary(lm(reg_win_p~pre_win_p,data=temptab)))
}
